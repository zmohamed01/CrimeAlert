<!DOCTYPE html>
<html>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//netdna.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
  <head>
    <title>Place Autocomplete</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <div class="container class="center"">
        <div class="row">
            <div class="col-md-6 col-md-offset-5">
                <h1> All Cities</h1>
                <h5> Search for a city:</h5>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 col-md-offset-4">
                <form action="" class="search-form">
                    <div class="form-group has-feedback">
                		<label for="search" class="sr-only">Search for a city...</label>
                		<input type="text" class="form-control" name="search" id="search" placeholder="search">
                  		<span class="glyphicon glyphicon-search form-control-feedback"></span>
                	</div>
                </form>
            </div>
        </div>
    </div>
  <script>
      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
      function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
          center: { lat: 54.5781, lng: -4.4360 },
          zoom: 6.2,
        });
        // for(var i = 0; i < gon.bruh.length; i++){
          new google.maps.Marker({
            position: { lat: 51.2365, lng: -0.5703 },
            // title: gon.locations[i].name,
            map: map
          });
        // }
        infoWindow = new google.maps.InfoWindow();
        const locationButton = document.createElement("button");
        locationButton.textContent = "Click here to get your current location!";
        locationButton.classList.add("custom-map-control-button");
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
        locationButton.addEventListener("click", () => {
          // Try HTML5 geolocation.
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
              (position) => {
                const pos = {
                  lat: position.coords.latitude,
                  lng: position.coords.longitude,
                };
                infoWindow.setPosition(pos);
                infoWindow.setContent("Location found.");
                infoWindow.open(map);
                map.setCenter(pos);
                map.setZoom(17);
              },
              () => {
                handleLocationError(true, infoWindow, map.getCenter());
              }
            );
          }
        });
        const card = document.getElementById("pac-card");
        const input = document.getElementById("pac-input");
        const biasInputElement = document.getElementById("use-location-bias");
        const strictBoundsInputElement = document.getElementById(
          "use-strict-bounds"
        );
        const options = {
          componentRestrictions: { country: "uk" },
          fields: ["formatted_address", "geometry", "name"],
          origin: map.getCenter(),
          strictBounds: false,
          types: ["establishment"],
        };
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);
        const autocomplete = new google.maps.places.Autocomplete(
          input,
          options
        );
        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo("bounds", map);
        const infowindow = new google.maps.InfoWindow();
        const infowindowContent = document.getElementById("infowindow-content");
        infowindow.setContent(infowindowContent);
        const marker = new google.maps.Marker({
          map,
          anchorPoint: new google.maps.Point(0, -29),
        });
        autocomplete.addListener("place_changed", () => {
          infowindow.close();
          marker.setVisible(false);
          const place = autocomplete.getPlace();

          if (!place.geometry || !place.geometry.location) {
            // User entered the name of a Place that was not suggested and
            // pressed the Enter key, or the Place Details request failed.
            window.alert(
              "No details available for input: '" + place.name + "'"
            );
            return;
          }

          // If the place has a geometry, then present it on a map.
          if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
          } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);
          }
          marker.setPosition(place.geometry.location);
          marker.setVisible(true);
          infowindowContent.children["place-name"].textContent = place.name;
          infowindowContent.children["place-address"].textContent =
            place.formatted_address;
          infowindow.open(map, marker);
        });

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, types) {
          const radioButton = document.getElementById(id);
          radioButton.addEventListener("click", () => {
            autocomplete.setTypes(types);
            input.value = "";
          });
        }
        setupClickListener("changetype-all", []);
        setupClickListener("changetype-address", ["address"]);
        setupClickListener("changetype-establishment", ["establishment"]);
        setupClickListener("changetype-geocode", ["geocode"]);
        biasInputElement.addEventListener("change", () => {
          if (biasInputElement.checked) {
            autocomplete.bindTo("bounds", map);
          } else {
            // User wants to turn off location bias, so three things need to happen:
            // 1. Unbind from map
            // 2. Reset the bounds to whole world
            // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
            autocomplete.unbind("bounds");
            autocomplete.setBounds({
              east: 180,
              west: -180,
              north: 90,
              south: -90,
            });
            strictBoundsInputElement.checked = biasInputElement.checked;
          }
          input.value = "";
        });
        strictBoundsInputElement.addEventListener("change", () => {
          autocomplete.setOptions({
            strictBounds: strictBoundsInputElement.checked,
          });

          if (strictBoundsInputElement.checked) {
            biasInputElement.checked = strictBoundsInputElement.checked;
            autocomplete.bindTo("bounds", map);
          }
          input.value = "";
        });
        function search() {
          const search = {
            bounds: map.getBounds(),
            types: ["lodging"],
          };
          places.nearbySearch(search, (results, status, pagination) => {
            if (status === google.maps.places.PlacesServiceStatus.OK && results) {
              clearResults();
              clearMarkers();

              // Create a marker for each hotel found, and
              // assign a letter of the alphabetic to each marker icon.
              for (let i = 0; i < results.length; i++) {
                const markerLetter = String.fromCharCode("A".charCodeAt(0) + (i % 26));
                const markerIcon = MARKER_PATH + markerLetter + ".png";
                // Use marker animation to drop the icons incrementally on the map.
                markers[i] = new google.maps.Marker({
                  position: results[i].geometry.location,
                  animation: google.maps.Animation.DROP,
                  icon: markerIcon,
                });
                // If the user clicks a hotel marker, show the details of that hotel
                // in an info window.
                markers[i].placeResult = results[i];
                google.maps.event.addListener(markers[i], "click", showInfoWindow);
                setTimeout(dropMarker(i), i * 100);
                addResult(results[i], i);
              }
            }
          });
        }

        function clearMarkers() {
          for (let i = 0; i < markers.length; i++) {
            if (markers[i]) {
              markers[i].setMap(null);
            }
          }
          markers = [];
        }

        // Set the country restriction based on user input.
        // Also center and zoom the map on the given country.
        function setAutocompleteCountry() {
          const country = document.getElementById("country").value;

          if (country == "all") {
            autocomplete.setComponentRestrictions({ country: [] });
            map.setCenter({ lat: 15, lng: 0 });
            map.setZoom(2);
          } else {
            autocomplete.setComponentRestrictions({ country: country });
            map.setCenter(countries[country].center);
            map.setZoom(countries[country].zoom);
          }
          clearResults();
          clearMarkers();
        }

        function dropMarker(i) {
          return function () {
            markers[i].setMap(map);
          };
        }

        function addResult(result, i) {
          const results = document.getElementById("results");
          const markerLetter = String.fromCharCode("A".charCodeAt(0) + (i % 26));
          const markerIcon = MARKER_PATH + markerLetter + ".png";
          const tr = document.createElement("tr");
          tr.style.backgroundColor = i % 2 === 0 ? "#F0F0F0" : "#FFFFFF";

          tr.onclick = function () {
            google.maps.event.trigger(markers[i], "click");
          };
          const iconTd = document.createElement("td");
          const nameTd = document.createElement("td");
          const icon = document.createElement("img");
          icon.src = markerIcon;
          icon.setAttribute("class", "placeIcon");
          icon.setAttribute("className", "placeIcon");
          const name = document.createTextNode(result.name);
          iconTd.appendChild(icon);
          nameTd.appendChild(name);
          tr.appendChild(iconTd);
          tr.appendChild(nameTd);
          results.appendChild(tr);
        }

        function clearResults() {
          const results = document.getElementById("results");

          while (results.childNodes[0]) {
            results.removeChild(results.childNodes[0]);
          }
        }

        // Get the place details for a hotel. Show the information in an info window,
        // anchored on the marker for the hotel that the user selected.
        function showInfoWindow() {
          const marker = this;
          places.getDetails(
            { placeId: marker.placeResult.place_id },
            (place, status) => {
              if (status !== google.maps.places.PlacesServiceStatus.OK) {
                return;
              }
              infoWindow.open(map, marker);
              buildIWContent(place);
            }
          );
        }

        // Load the place information into the HTML elements used by the info window.
        function buildIWContent(place) {
          document.getElementById("iw-icon").innerHTML =
            '<img class="hotelIcon" ' + 'src="' + place.icon + '"/>';
          document.getElementById("iw-url").innerHTML =
            '<b><a href="' + place.url + '">' + place.name + "</a></b>";
          document.getElementById("iw-address").textContent = place.vicinity;

          if (place.formatted_phone_number) {
            document.getElementById("iw-phone-row").style.display = "";
            document.getElementById("iw-phone").textContent =
              place.formatted_phone_number;
          } else {
            document.getElementById("iw-phone-row").style.display = "none";
          }

          // Assign a five-star rating to the hotel, using a black star ('&#10029;')
          // to indicate the rating the hotel has earned, and a white star ('&#10025;')
          // for the rating points not achieved.
          if (place.rating) {
            let ratingHtml = "";

            for (let i = 0; i < 5; i++) {
              if (place.rating < i + 0.5) {
                ratingHtml += "&#10025;";
              } else {
                ratingHtml += "&#10029;";
              }
              document.getElementById("iw-rating-row").style.display = "";
              document.getElementById("iw-rating").innerHTML = ratingHtml;
            }
          } else {
            document.getElementById("iw-rating-row").style.display = "none";
          }

          // The regexp isolates the first part of the URL (domain plus subdomain)
          // to give a short URL for displaying in the info window.
          if (place.website) {
            let fullUrl = place.website;
            let website = String(hostnameRegexp.exec(place.website));

            if (!website) {
              website = "http://" + place.website + "/";
              fullUrl = website;
            }
            document.getElementById("iw-website-row").style.display = "";
            document.getElementById("iw-website").textContent = website;
          } else {
            document.getElementById("iw-website-row").style.display = "none";
          }
        }
      }
    </script>
  </head>
  <body>
    <div class="pac-card" id="pac-card">
      <div>


        <div id="title">Search for a Specific Location</div>

        <br />

      </div>
      <div id="pac-container" class="col-md-4 ">
        <input id="pac-input"  class="form-control" type="text" placeholder="Enter a location" />
      </div>
    </div>
    <div id="map"></div>
    <div id="infowindow-content">
      <span id="place-name" class="title"></span><br />
      <span id="place-address"></span>
    </div>
    <table class="table table-hover ">
      <thead>
        <tr class="table-bordered">
          <th>City</th>
          <th colspan="6"></th>
        </tr>
      </thead>

      <tbody>
        <% @places.each do |place| %>
          <tr>
            <td><%= place.name %></td>
            <td><%= link_to 'Show', place %></td>
          </tr>
        <% end %>
      </tbody>
    </table>

    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB1FoiNJNZ68f9AtSOmByGJuZ_b8pHLmoQ&callback=initMap&libraries=places&v=weekly"
      async
    ></script>
  </body>
</html>
